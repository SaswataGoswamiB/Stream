Parallel streams in Java, often created using the `.parallelStream()` method on collections, work by splitting the data into multiple parts and processing those parts concurrently across multiple threads. This is done to take advantage of multi-core processors and potentially speed up the processing of large datasets.

Here's a simplified overview of how parallel streams work internally:

1. **Data Splitting:** When you create a parallel stream, the stream framework internally divides the data into smaller chunks, known as "splits" or "substreams." Each split represents a portion of the original data.

2. **Thread Pool:** Java maintains a pool of worker threads (managed by the ForkJoinPool framework) to execute tasks concurrently. The number of threads in this pool is determined by factors like the available processors and the parallelism level you specify.

3. **Parallel Execution:** The framework then assigns each split to one of the worker threads. These worker threads simultaneously process their assigned splits independently.

4. **Processing:** Within each worker thread, the stream operations (e.g., `filter`, `map`, `reduce`) are executed on their respective splits. This allows for parallel execution of the operations on different parts of the data.

5. **Combining Results:** After processing, if necessary, the results from different splits are combined or merged to produce the final result. This merging process depends on the specific stream operation being performed. For example, in a `reduce` operation, results may be combined by applying a combining function.

6. **Synchronization:** Java handles synchronization and thread coordination internally to ensure that multiple threads can safely work on different parts of the data without causing conflicts or data corruption.

7. **Completion:** Once all the worker threads have completed their tasks and the results are combined, the parallel stream operation is considered finished.

It's important to note that while parallel streams can greatly improve the performance of certain operations on large datasets, they are not always faster than sequential streams. The effectiveness of parallelism depends on factors like the nature of the operation, the size of the data, and the available hardware resources. Additionally, you should be cautious when using parallel streams with shared mutable state, as it can lead to race conditions and concurrency issues.